import{_ as n,c as s,o as a,a as t}from"./app.fb0cb03d.js";const g='{"title":"Testing stores","description":"","frontmatter":{},"headers":[{"level":2,"title":"Unit testing a store","slug":"unit-testing-a-store"},{"level":2,"title":"Unit testing components","slug":"unit-testing-components"},{"level":2,"title":"E2E tests","slug":"e2e-tests"}],"relativePath":"cookbook/testing.md","lastUpdated":1637048271678}',p={},e=t(`<h1 id="testing-stores" tabindex="-1">Testing stores <a class="header-anchor" href="#testing-stores" aria-hidden="true">#</a></h1><p>Stores will, by design, be used at many places and can make testing much harder than it should be. Fortunately, this doesn&#39;t have to be the case. We need to take care of three things when testing stores:</p><ul><li>The <code>pinia</code> instance: Stores cannot work without it</li><li><code>actions</code>: most of the time, they contain the most complex logic of our stores. Wouldn&#39;t it be nice if they were mocked by default?</li><li>Plugins: If you rely on plugins, you will have to install them for tests too</li></ul><p>Depending on what or how you are testing, we need to take care of these three differently:</p><ul><li><a href="#unit-testing-a-store">Unit testing stores (outside of components)</a></li><li><a href="#unit-testing-components">Unit testing components that use stores</a></li><li><a href="#e2e-tests">End to End tests</a></li></ul><h2 id="unit-testing-a-store" tabindex="-1">Unit testing a store <a class="header-anchor" href="#unit-testing-a-store" aria-hidden="true">#</a></h2><p>To unit test a store, the most important part is creating a <code>pinia</code> instance:</p><div class="language-js"><pre><code><span class="token comment">// counterStore.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setActivePinia<span class="token punctuation">,</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../src/stores/counter&#39;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Counter Store&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// creates a fresh pinia and make it active so it&#39;s automatically picked</span>
    <span class="token comment">// up by any useStore() call without having to pass it to it:</span>
    <span class="token comment">// \`useStore(pinia)\`</span>
    <span class="token function">setActivePinia</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;increments&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;increments by amount&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>If you have any store plugins, there is one important thing to know: <strong>plugins won&#39;t be used until <code>pinia</code> is installed in an App</strong>. This can be solved by creating an empty App or a fake one:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setActivePinia<span class="token punctuation">,</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> somePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../src/stores/plugin&#39;</span>

<span class="token comment">// same code as above...</span>

<span class="token comment">// you don&#39;t need to create one app per test</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>somePlugin<span class="token punctuation">)</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
  <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="unit-testing-components" tabindex="-1">Unit testing components <a class="header-anchor" href="#unit-testing-components" aria-hidden="true">#</a></h2><p>This can be achieved with <code>createTestingPinia()</code>. I haven&#39;t been able to write proper documentation for this yet but its usage can be discovered through autocompletion and the documentation that appears in tooltips.</p><p>Start by installing <code>@pinia/testing</code>:</p><div class="language-sh"><pre><code>npm i -D @pinia/testing
</code></pre></div><p>And make sure to create a testing pinia in your tests when mounting a component:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue/test-utils&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createTestingPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@pinia/nuxt&#39;</span>

<span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  global<span class="token operator">:</span> <span class="token punctuation">{</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createTestingPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// uses the testing pinia!</span>

<span class="token comment">// state can be directly manipulated</span>
store<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;my new name&#39;</span>
<span class="token comment">// can also be done through patch</span>
store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;new name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;new name&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// actions are stubbed by default but can be configured by</span>
<span class="token comment">// passing an option to \`createTestingPinia()\`</span>
store<span class="token punctuation">.</span><span class="token function">someAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>someAction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">expect</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>someAction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenLastCalledWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>You can find more examples in <a href="https://github.com/posva/pinia/blob/v2/packages/testing/src/testing.spec.ts" target="_blank" rel="noopener noreferrer">the tests of the testing package</a>.</p><h2 id="e2e-tests" tabindex="-1">E2E tests <a class="header-anchor" href="#e2e-tests" aria-hidden="true">#</a></h2><p>When it comes to pinia, you don&#39;t need to change anything for e2e tests, that&#39;s the whole point of e2e tests! You could maybe tests HTTP requests, but that&#39;s way beyond the scope of this guide \u{1F604}.</p>`,19),o=[e];function c(i,u,l,k,r,d){return a(),s("div",null,o)}var h=n(p,[["render",c]]);export{g as __pageData,h as default};
