import{_ as n,c as s,o as a,a as t}from"./app.fb0cb03d.js";const g='{"title":"Composing Stores","description":"","frontmatter":{},"headers":[{"level":2,"title":"Shared Getters","slug":"shared-getters"},{"level":2,"title":"Shared Actions","slug":"shared-actions"}],"relativePath":"cookbook/composing-stores.md","lastUpdated":1637048271678}',o={},p=t(`<h1 id="composing-stores" tabindex="-1">Composing Stores <a class="header-anchor" href="#composing-stores" aria-hidden="true">#</a></h1><p>Composing stores is about having stores that use each other and there is one rule to follow:</p><p>If <strong>two or more stores use each other</strong>, you must create a new store in a <strong>separate file</strong> where you import and use all of them.</p><p>Note that if one store uses an other store, <strong>there is no need to create a new store in a separate file</strong>, you can directly import it. Think of it as nesting.</p><p>You can call <code>useOtherStore()</code> at the top of any getter or action:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> cartStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... other getters</span>
    <span class="token function">summary</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, you have </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> items in your cart. It costs </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>state<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  actions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token function">apiPurchase</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="shared-getters" tabindex="-1">Shared Getters <a class="header-anchor" href="#shared-getters" aria-hidden="true">#</a></h2><p>If you need to compute a value based on the <code>state</code> and/or <code>getters</code> of multiple stores, you may be able to import all the stores but one into the remaining store, but depending on how your stores are used across your application, <strong>this would hurt your code splitting</strong> because importing the store that imports all others stores, would result in <strong>one single big chunk</strong> with all of your stores. To prevent this, <strong>we follow the rule above</strong> and we create a new file with a new store:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCartStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./cart&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useSharedStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;shared&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">summary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> cart <span class="token operator">=</span> <span class="token function">useCartStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, you have </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cart<span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> items in your cart. It costs </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cart<span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="shared-actions" tabindex="-1">Shared Actions <a class="header-anchor" href="#shared-actions" aria-hidden="true">#</a></h2><p>When an actions needs to use multiple stores, we do the same, we create a new file with a new store:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCartStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./cart&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useSharedStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;shared&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">orderCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> cart <span class="token operator">=</span> <span class="token function">useCartStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">apiOrderCart</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>token<span class="token punctuation">,</span> cart<span class="token punctuation">.</span>items<span class="token punctuation">)</span>
        cart<span class="token punctuation">.</span><span class="token function">emptyCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">displayError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,12),e=[p];function c(u,r,i,l,k,d){return a(),s("div",null,e)}var m=n(o,[["render",c]]);export{g as __pageData,m as default};
