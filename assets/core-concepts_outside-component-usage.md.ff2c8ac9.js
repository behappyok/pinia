import{_ as n,c as s,o as a,a as t}from"./app.fb0cb03d.js";const f='{"title":"\u5728\u7EC4\u4EF6\u5916\u4F7F\u7528store","description":"","frontmatter":{},"headers":[{"level":2,"title":"Single Page Applications","slug":"single-page-applications"},{"level":2,"title":"SSR Apps","slug":"ssr-apps"}],"relativePath":"core-concepts/outside-component-usage.md","lastUpdated":1637048271678}',e={},o=t(`<h1 id="\u5728\u7EC4\u4EF6\u5916\u4F7F\u7528store" tabindex="-1">\u5728\u7EC4\u4EF6\u5916\u4F7F\u7528store <a class="header-anchor" href="#\u5728\u7EC4\u4EF6\u5916\u4F7F\u7528store" aria-hidden="true">#</a></h1><p>Pinia stores rely on the <code>pinia</code> instance to share the same store instance across all calls. Most of the time, this works out of the box by just calling your <code>useStore()</code> function. For example, in <code>setup()</code>, you don&#39;t need to do anything else. But things are a bit different outside of a component. Behind the scenes, <code>useStore()</code> <em>injects</em> the <code>pinia</code> instance you gave to your <code>app</code>. This means that if the <code>pinia</code> instance cannot be automatically injected, you have to manually provide it to the <code>useStore()</code> function. You can solve this differently depending on the kind of application you are writing.</p><h2 id="single-page-applications" tabindex="-1">Single Page Applications <a class="header-anchor" href="#single-page-applications" aria-hidden="true">#</a></h2><p>If you are not doing any SSR (Server Side Rendering), any call of <code>useStore()</code> after installing the pinia plugin with <code>app.use(pinia)</code> will work:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/user&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token comment">// \u274C  fails because it&#39;s called before the pinia is created</span>
<span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>

<span class="token comment">// \u2705 works because the pinia instance is now active</span>
<span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>The easiest way to ensure this is always applied is to <em>defer</em> calls of <code>useStore()</code> by placing them inside functions that will always run after pinia is installed.</p><p>Let&#39;s take a look at this example of using a store inside of a navigation guard with Vue Router:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u274C Depending on the order of imports this will fail</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// we wanted to use the store here</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u2705 This will work because the router starts its navigation after</span>
  <span class="token comment">// the router is installed and pinia will be installed too</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>store<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;/login&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="ssr-apps" tabindex="-1">SSR Apps <a class="header-anchor" href="#ssr-apps" aria-hidden="true">#</a></h2><p>When dealing with Server Side Rendering, you will have to pass the <code>pinia</code> instance to <code>useStore()</code>. This prevents pinia from sharing global state between different application instances.</p><p>There is a whole section dedicated to it in the <a href="/ssr/">SSR guide</a>, this is just a short explanation:</p>`,11),p=[o];function c(i,r,l,u,k,d){return a(),s("div",null,p)}var g=n(e,[["render",c]]);export{f as __pageData,g as default};
